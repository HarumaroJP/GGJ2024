using System;
using UnityEditor;
using UnityEngine;
using UnityEngine.InputSystem;

namespace PropertyGenerator
{
    /// <summary>
    ///     InputActionのGuidを全て生成するクラス
    /// </summary>
    internal static class ActionGuidGenerator
    {
        private const string className = "ActionGuid";

        [MenuItem("Assets/PropertyGenerator/GenerateActionGuid", priority = 1)]
        private static void Init()
        {
            if (Selection.activeObject is InputActionAsset inputActionAsset)
            {
                Generate(inputActionAsset);
            }
            else
            {
                Debug.LogError($"{nameof(InputActionAsset)}以外のファイルが選択されています。");
            }
        }

        private static void Generate(InputActionAsset inputActionAsset)
        {
            var builder = new CodeBuilder();
            
            builder.AddAutoGenerated(nameof(ActionGuidGenerator));
            builder.AddNameSpace("System");

            using (builder.CreateBlockScope("namespace PropertyGenerator.Generated"))
            {
                //ActionMapを集めるクラスの生成
                CreateActionMapCode(inputActionAsset, builder);
                builder.NewLine();

                //ActionMapのGuidを集めるクラスの生成
                foreach (var actionMap in inputActionAsset.actionMaps)
                {
                    CreateInputActionCode(actionMap, builder);
                    builder.NewLine();
                }

                builder.RemoveLastChar();
                builder.RemoveLastChar();
            }

            SourceCreator.CreateFile(className, builder);
        }

        private static void CreateActionMapCode(InputActionAsset actionAsset, CodeBuilder builder)
        {
            if (actionAsset.actionMaps.Count == 0)
            {
                return;
            }

            using (builder.CreateBlockScope("public class " + className))
            {
                foreach (var actionMap in actionAsset.actionMaps)
                {
                    string mapName = actionMap.name.Replace(" ", String.Empty);
                    builder.NewLine($"public static readonly {mapName} {mapName} = new {mapName}();");
                }
            }
        }

        private static void CreateInputActionCode(InputActionMap actionMap, CodeBuilder builder)
        {
            using (builder.CreateBlockScope($"public class {actionMap.name.Replace(" ", String.Empty)}"))
            {
                builder.NewLine($"public readonly Guid MapId = new Guid(\"{actionMap.id}\");");

                foreach (InputAction inputAction in actionMap)
                {
                    builder.NewLine($"public readonly Guid {inputAction.name.Replace(" ", String.Empty)} = new Guid(\"{inputAction.id}\");");
                }
            }
        }
    }
}